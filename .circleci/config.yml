version: 2.1

jobs:
    unit-test:
        docker:
            -   image: cimg/node:18.13
        steps:
            - checkout
            -   restore_cache:
                    keys:
                        - node-v1-{{ checksum "package-lock.json" }}
                        - node-v1-
            -   run: npm ci --no-audit --prefer-offline
            -   save_cache:
                    key: node-v1-{{ checksum "package-lock.json" }}
                    paths:
                        - node_modules
            -   run:
                    name: "Run Unit Tests"
                    command: npm run test

    compile:
        docker:
            -   image: cimg/node:18.13
        steps:
            - checkout
            -   restore_cache:
                    keys:
                        - node-v1-{{ checksum "package-lock.json" }}
                        - node-v1-
            -   run: npm ci --no-audit --prefer-offline
            -   save_cache:
                    key: node-v1-{{ checksum "package-lock.json" }}
                    paths:
                        - node_modules
            -   run: npm run build

    build-and-push:
        docker:
            -   image: cimg/node:18.13
        steps:
            - checkout
            - setup_remote_docker
            -   run:
                    name: Install dependencies
                    command: npm ci --no-audit --prefer-offline
            -   run:
                    name: Build application
                    command: npm run build
            -   run:
                    name: Build Docker Image from current filesystem
                    command: |
                        docker build -t ipwnpancakes/vinyl-cd-emporium:latest .
                        echo "$DOCKERHUB_ACCESS_TOKEN" | docker login -u "$DOCKERHUB_USERNAME" --password-stdin
                        docker push ipwnpancakes/vinyl-cd-emporium:latest
    deploy:
        docker:
            -   image: digitalocean/doctl:latest
        steps:
            -   run:
                    name: "Trigger deployment"
                    command: /app/doctl apps create-deployment "$DIGITAL_OCEAN_APP_ID" -t "$DIGITAL_OCEAN_ACCESS_TOKEN"

workflows:
    test-and-build-and-deploy:
        jobs:
            - unit-test
            - compile
            -   build-and-push:
                    requires:
                        - unit-test
                        - compile
                    filters:
                        branches:
                            only:
                                - master
            -   deploy:
                    requires:
                        - build-and-push
                    filters:
                        branches:
                            only:
                                - master
